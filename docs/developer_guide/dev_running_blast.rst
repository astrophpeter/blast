Running blast locally
=====================

If you want to develop on blast, for most things, you will have to run blast
locally to see the effect of your code changes. This pages walks you through
how to install blast and get it running on your machine.

Install the Docker Desktop app
-------------------------------

The recommended option for installing and running blast locally is to
use Docker. It is so strongly recommended in fact, that I'm not going to write
documentation on how to install and run blast any other way. The first step is to
install the Docker Desktop application, which can be found
`here <https://docs.docker.com/get-docker/>`_ for mac, windows, and linux. Make
sure you have Docker Compose version 1.28.0 or later.  We recommend allocating
at least 32 GB of memory in the Docker settings.

Clone the blast repository
--------------------------

Clone the blast repository.

.. code:: none

    git clone https://github.com/astrophpeter/blast.git

Setup environment file
----------------------

Blast needs some environment variables to run. All of
these should be located in the :code:`env/.env.dev` file. This file is not in
source control, you need to create and populate this file yourself.
It should follow the same format as the :code:`env/.env.dev.example` file. If you
do not need to ingest real transient data from TNS the example :code:`.env.file`
file should be sufficient with the TNS variables left blank. While in the
:code:`env/` directory run:

.. code:: none

    cp .env.dev.example .env.dev

If you do need to ingest real TNS for development you will need the details of
a TNS api bot (see `<https://www.wis-tns.org/bots>`_).

Run the blast app
-----------------

First pull the latest version of the blast image

.. code:: none

    docker pull ghcr.io/astrophpeter/blast:latest

Once in the top level blast directory, start the Docker containers. This command
brings up the full blast stack,

.. code:: none

    bash run/blast.run.sh full_dev

If you are only interested in running the web server and database, which is
usually sufficient for front end web development, you can run:

.. code:: none

    bash run/blast.run.sh slim_dev

Then go to `http://0.0.0.0:8000/ <http://0.0.0.0:8000/>`_  in your web browser,
after all the containers have started, and blast should be running.  

Running blast in these two modes means you can edit most code and you will see
the resulting live changes in the web interface.

To stop blast from running, open a new terminal window and run:

.. code:: none

    bash run/blast.stop.sh $PROFILE

where :code:`$PROFILE` is the active Docker Compose profile; for example, :code:`slim_dev`.

.. warning::

    When you stop the blast container make sure all services are stopped. You can see which
    services are running in the Docker Desktop app and stop services manually there.

Persistent data volumes
-----------------------

There are three Docker volumes created for persistent data storage: (1) :code:`blast-data`, (2) :code:`blast-db`, and (3) :code:`django-static`. When you run blast for the first time, these are created automatically by Docker, and then the initialization script populates each volume. If the :code:`INITIALIZE_DATA` environment variable is set to :code:`true`, then the :code:`app/entrypoints/initialize_all_data.sh` script will download and install all required astronomical data to the :code:`blast-data` volume. The :code:`blast-db` volume stores the Django SQL database, and it is provisioned by standard Django migration commands. The :code:`django-static` volume stores the Django static files, which are generated by standard Django commands as well.

Once the application has been initialized, the init script will create an empty file :code:`docker/initialized/.initialized` whose presence will prevent subsequent restarts of the application from executing the initialization scripts.

To restart the application with a clean Django database, you can delete the associated volume (you might need to first discover the volume name using :code:`docker volume ls`) after stopping and removing the containers (where in the commands below, :code:`$PROFILE` is the active Docker Compose profile; for example, :code:`slim_dev`):

.. code:: bash

    # Stop and remove services and internal networks
    bash run/blast.stop.sh $PROFILE
    # Delete the Django database volume
    docker volume rm blast_blast-db
    # Remove the ".initialized" file
    rm docker/initialized/.initialized

Unlike the Django database initialization, which fails if the database has already been populated, the astronomical data initialization is idempotent, meaning that it is safe to repeatedly execute the :code:`app/entrypoints/initialize_all_data.sh` script in the container because the script only downloads data if the target directories are empty.

Testing the blast app
---------------------

To run tests with the blast app, while the full_dev or slim_dev containers are
up, in a separate terminal run

.. code:: none

    bash run/blast.test.up.sh

This allows you to run the tests without stopping the containers. If you would
like to run the tests from scratch, (when the blast app is not up) run,

.. code:: none

    bash run/blast.run.sh test
